import java.util.*;

class BeingZero {
    public int orangesRotting(char[][] grid) {
        int cnt = 0;
        cnt=fill(grid);
        return cnt;
    }
    int di[]={-1,0,1,0};
    int dj[]={0,1,0,-1};
    int fill(char a[][]){
        Queue<Pair> q=new LinkedList<>();
        int r=a.length,c=a[0].length;
        boolean visited[][]=new boolean[r][c];
        int k1=0,fc=0;
        // for(int i=0;i<a.length;i++){
        //     for(int j=0;j<a[0].length;j++){
        //         if(a[i][j]=='0')k1++;
        //     }
        // }
        // if(k1==a.length*a[0].length)return -1;
        // if(a[0][0]=='1')return -1;
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(a[i][j]=='2')
                {
                    q.add(new Pair(i,j));
                visited[i][j]=true;
            }
                else if(a[i][j]=='1')fc++;
            }
        }
        if(fc==0)return 0;
        if(q.size()==0)return -1;
        int cnt=-1;
        while(q.size()>0){
            int n=q.size();
            cnt++;
            while(n-->0){
                var e=q.poll();
                int ni=e.i,nj=e.j;
                // visited[ni][nj]=true;
                for(int k=0;k<4;k++){
                    int y=ni+di[k],z=nj+dj[k];
                    if(isValid(r,c,y,z) && !visited[y][z] &&a[y][z]=='1'){
                        a[y][z]='2';
                        q.add(new Pair(y,z));
                        visited[y][z]=true;
                        fc--;
                    }
                }
            }
        }
        // for(int i=0;i<a.length;i++){
        //     for(int j=0;j<a[0].length;j++){
        //         if(a[i][j]=='1')return -1;
        //     }
        // }
        return fc==0?cnt:-1;
        // return cnt;
    }
    boolean isValid(int r,int c,int i,int j){
        return (i>=0 && j>=0 && i<r && j<c);
    }
    
}
class Pair{
    int i,j;
    Pair(int i,int j){
        this.i=i;
        this.j=j;
    }
}
